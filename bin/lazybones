#! /usr/bin/env groovy
@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='0.7.2')
import wslite.rest.*

/*
def response = client.get(path:'/users/show.json', query:[screen_name:'jwagenleitner', include_entities:true])

assert 200 == response.statusCode
assert "John Wagenleitner" == response.json.name
*/

templatesBaseUrl = "http://dl.bintray.com/v1/content/pledbrook/lazybones-templates"
cacheDir = new File("${System.getProperty('user.home')}/.groovy/lazybones-templates")

// REST API currently requires an API key, which I'm not keen on making public!
//def restClient = new RESTClient("https://bintray.com/api/v1")

def cmd
if (args.size() == 0) {
    cmd = "help"
    args = []
}
else {
    cmd = args[0]
    args = args.size() == 1 ? [] : args[1..-1]
}

// Execute the corresponding command
"${cmd}Command"(args)



//--- End of script -------------------

def createCommand(args) {
    if (args.size() != 3) {
        println """\
Incorrect number of arguments.

USAGE: create <template> <version> <dir>

  where  template = The name of the project template to use.
         version  = The version of the project template to use.
         dir      = The name of the directory in which to create the project
                    structure. This can be '.' to mean 'in the current
                    directory.'
"""
        System.exit 1
    }

    // Can't fetch the latest version until BinTray allows anonymous API access.
    // Or I set up a separate server for this stuff.
    def templateZip = fetchTemplate(args[0], args[1]) 
    def ant = new AntBuilder()
    ant.project.getBuildListeners().each{ it.setOutputPrintStream(new PrintStream('/dev/null')) }
    ant.unzip src: templateZip.absolutePath, dest: args[2], overwrite: false

    // Find a suitable README and display that if it exists.
    def targetDir = new File(args[2])
    def readmeFiles = targetDir.listFiles( { dir, name -> name == "README" || name.startsWith("README") } as FilenameFilter)

    println()
    if (!readmeFiles) println "This project has no README"
    else println readmeFiles[0].text

    println()
    println "Project created in ${args[2]}!"
}

def listCommand(args) {
    println "Sorry, this command isn't implemented yet."
}

def helpCommand(args) {

    final cmdDescriptions = [
        create: "Creates a new project structure from a named template."]//,
        // 'list' is unavailable until get anonymous BinTray API access
//        list: "Lists the available project templates." ]

    println "Available commands:"
    println()
    for (cmdDesc in cmdDescriptions) {
        println "    " + cmdDesc.key.padRight(15) + cmdDesc.value
    }
    println()
}

private fetchTemplate(String name, String version) {
    // Does it exist in the cache? If not, pull it from BinTray.
    def packageFile = new File(cacheDir, "${name}-${version}.zip")
    if (!packageFile.exists()) {
        cacheDir.mkdirs()

        packageFile.withOutputStream { out ->
            new URL(templatesBaseUrl + "/${name}-template-${version}.zip").withInputStream { input ->
                out << input
            }
        }
    }

    return packageFile

}
